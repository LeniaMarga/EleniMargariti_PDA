'use strict';

var _chai = require('chai');

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

var _fs2 = require('mz/fs');

var mzfs = _interopRequireWildcard(_fs2);

var _path = require('path');

var fsp = _interopRequireWildcard(_path);

var _4 = require('..');

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
            return obj;
        } else {
            var newObj = {};

            if (obj != null) {
                    for (var key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                    }
                }

            newObj.default = obj;
            return newObj;
        }
}

var _ = (typeof require === 'function' ? require('streamline-runtime') : Streamline.require('streamline-runtime'))._;

var _streamline = typeof require === 'function' ? require('streamline-runtime/lib/fibers/runtime') : Streamline.require('streamline-runtime/lib/fibers/runtime');

var _filename = '/Users/bruno/dev/f-promise/test/f-promise-test.ts';

var test = function test(name, fn) {
    it(name, function (done) {
        (0, _4.run)(function () {
            return fn(), undefined;
        }).then(done, done);
    });
};

var delay = function delay(val, millis) {
    return (0, _4.wait)(function (cb) {
        setTimeout(function () {
            cb(null, val);
        }, millis || 0);
    });
}; // tslint:disable:no-reference
/// <reference path="../node_modules/streamline-node/index.d.ts" />
/// <reference path="../node_modules/streamline-typings/streamline-runtime.d.ts" />


var ok = _chai.assert.ok,
    notOk = _chai.assert.notOk,
    equal = _chai.assert.equal,
    notEqual = _chai.assert.notEqual,
    deepEqual = _chai.assert.deepEqual,
    strictEqual = _chai.assert.strictEqual,
    typeOf = _chai.assert.typeOf,
    isNull = _chai.assert.isNull,
    isNotNull = _chai.assert.isNotNull,
    isUndefined = _chai.assert.isUndefined,
    isObject = _chai.assert.isObject;

describe('wait', function () {
    it('promise wait', function (done) {
        var p = (0, _4.run)(function () {
            var fname = fsp.join(__dirname, '../../test/f-promise-test.ts');
            var text = (0, _4.wait)(mzfs.readFile(fname, 'utf8'));
            typeOf(text, 'string');
            ok(text.length > 200);
            ok(text.indexOf('// tslint') === 0);
            var text2 = (0, _4.wait)(mzfs.readFile(fname, 'utf8'));
            equal(text, text2);
            return 'success';
        });
        p.then(function (result) {
            equal(result, 'success');
            done();
        }, done);
    });
    it('callback wait', function (done) {
        var p = (0, _4.run)(function () {
            var fname = fsp.join(__dirname, '../../test/f-promise-test.ts');
            var text = (0, _4.wait)(function (cb) {
                return fs.readFile(fname, 'utf8', cb);
            });
            typeOf(text, 'string');
            ok(text.length > 200);
            ok(text.indexOf('// tslint') === 0);
            var text2 = (0, _4.wait)(function (cb) {
                return fs.readFile(fname, 'utf8', cb);
            });
            equal(text, text2);
            return 'success';
        });
        p.then(function (result) {
            equal(result, 'success');
            done();
        }, done);
    });
    it('streamline wait', function (done) {
        var p = (0, _4.run)(function () {
            var fname = fsp.join(__dirname, '../../test/f-promise-test.ts');
            var text = (0, _4.wait_)(_streamline.async(function _$$$$(_2) {
                return _streamline.await(_filename, 58, fs, 'readFile', 2, null, false, [fname, 'utf8', true]);
            }, 0, 1));
            typeOf(text, 'string');
            ok(text.length > 200);
            ok(text.indexOf('// tslint') === 0);
            var text2 = (0, _4.wait_)(_streamline.async(function _$$$$2(_3) {
                return _streamline.await(_filename, 62, fs, 'readFile', 2, null, false, [fname, 'utf8', true]);
            }, 0, 1));
            equal(text, text2);
            return 'success';
        });
        p.then(function (result) {
            equal(result, 'success');
            done();
        }, done);
    });
});
describe('queue', function () {
    test('queue overflow', function () {
        var queue = new _4.Queue(2);
        // must produce and consume in parallel to avoid deadlock
        var produce = (0, _4.run)(function () {
            queue.write(4);
            queue.write(9);
            queue.write(16);
            queue.write(25);
        });
        var consume = (0, _4.run)(function () {
            strictEqual(queue.read(), 4);
            strictEqual(queue.read(), 9);
            strictEqual(queue.read(), 16);
            strictEqual(queue.read(), 25);
        });
        (0, _4.wait)(produce);
        (0, _4.wait)(consume);
        strictEqual(queue.peek(), undefined);
    });
    test('queue length, contents, alter', function () {
        var queue = new _4.Queue();
        queue.write(4);
        queue.write(9);
        queue.write(16);
        queue.write(25);
        strictEqual(queue.length, 4);
        strictEqual(queue.peek(), 4);
        deepEqual(queue.contents(), [4, 9, 16, 25]);
        queue.adjust(function (arr) {
            return [arr[3], arr[1]];
        });
        strictEqual(queue.peek(), 25);
        strictEqual(queue.read(), 25);
        strictEqual(queue.peek(), 9);
        strictEqual(queue.read(), 9);
        strictEqual(queue.peek(), undefined);
    });
});
describe('contexts', function () {
    var mainCx = (0, _4.context)();
    it('is main at top level', function () {
        equal((0, _4.context)(), mainCx);
    });
    it('is main inside run', function (done) {
        (0, _4.run)(function () {
            equal((0, _4.context)(), mainCx);
        }).then(done, done);
    });
    it('is scoped inside withContext', function (done) {
        var cx = {};
        (0, _4.run)(function () {
            equal((0, _4.context)(), mainCx);
            (0, _4.withContext)(function () {
                equal((0, _4.context)(), cx);
            }, cx);
            equal((0, _4.context)(), mainCx);
        }).then(done, done);
    });
    test('contexts', function () {
        var testContext = function testContext(x) {
            return (0, _4.withContext)(function () {
                var y = delay(2 * x);
                strictEqual(y, 2 * (0, _4.context)());
                return y + 1;
            }, x);
        };

        isObject((0, _4.context)());
        var promises = [(0, _4.run)(function () {
            return testContext(3);
        }), (0, _4.run)(function () {
            return testContext(5);
        })];
        deepEqual(promises.map(_4.wait), [7, 11]);
        isObject((0, _4.context)());
    });
});
describe('collection functions', function () {
    it('map', function (done) {
        (0, _4.run)(function () {
            deepEqual((0, _4.map)([2, 5], delay), [2, 5]);
            return 'success';
        }).then(function (result) {
            equal(result, 'success');
            done();
        }, done);
    });
});
describe('canWait', function () {
    it('true inside run', function (done) {
        (0, _4.run)(function () {
            ok((0, _4.canWait)());
            return 'success';
        }).then(function (result) {
            equal(result, 'success');
            done();
        }, done);
    });
    it('false outside run', function () {
        notOk((0, _4.canWait)());
    });
});
describe('eventHandler', function () {
    it('can wait with it', function (done) {
        setTimeout((0, _4.eventHandler)(function () {
            ok((0, _4.canWait)());
            done();
        }), 0);
    });
    it('cannot wait without', function (done) {
        setTimeout(function () {
            notOk((0, _4.canWait)());
            done();
        }, 0);
    });
    it('outside run', function (done) {
        notOk((0, _4.canWait)());
        var sync = true;
        (0, _4.eventHandler)(function (arg) {
            equal(arg, 'hello', 'arg ok');
            (0, _4.wait)(function (cb) {
                return setTimeout(cb, 0);
            });
            equal(sync, false, 'new fiber');
            done();
        })('hello');
        sync = false;
    });
    it('inside run', function (done) {
        (0, _4.run)(function () {
            var sync = true;
            ok((0, _4.canWait)());
            (0, _4.eventHandler)(function (arg) {
                equal(arg, 'hello', 'arg ok');
                (0, _4.wait)(function (cb) {
                    return setTimeout(cb, 0);
                });
                equal(sync, true, 'same fiber as run');
                done();
            })('hello');
            sync = false;
        });
    });
    it('preserves arity', function () {
        equal((0, _4.eventHandler)(function () {}).length, 0);
        equal((0, _4.eventHandler)(function (a, b) {}).length, 2);
    });
    it('starts with a fresh context if outside run', function (done) {
        ok(!(0, _4.canWait)());
        (0, _4.eventHandler)(function () {
            isNotNull((0, _4.context)());
            done();
        })();
    });
    it('preserves context if already inside run', function (done) {
        (0, _4.run)(function () {
            ok((0, _4.canWait)());
            var cx = {};
            (0, _4.withContext)(function () {
                (0, _4.eventHandler)(function () {
                    equal((0, _4.context)(), cx);
                    done();
                })();
            }, cx);
        });
    });
});
//# sourceMappingURL=f-promise-test.js.map